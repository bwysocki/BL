package pl.stalostech.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import pl.stalostech.app.TestApplication;
import pl.stalostech.autogenerated.xsd.model.Configuration;
import pl.stalostech.autogenerated.xsd.model.Model;
import pl.stalostech.repository.ConfigurationRepository;
import pl.stalostech.testutils.ModelFactory;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = TestApplication.class)
public class ConfigurationServiceTest {

	@Autowired
	private ConfigurationRepository repository;

	@Autowired
	private ModelFactory modelFactory;

	@Autowired
	@InjectMocks
	private ConfigurationService configurationService;

	@Before
	public void init() {
		MockitoAnnotations.initMocks(this);
		repository.save(modelFactory.getSampleConfigurationModel());
	}

	@Test
	public void testGetConfigurationFromDb() {
		Configuration conf = configurationService.getConfigurationFromDb();
		assertEquals(modelFactory.getSampleConfigurationModel().getFps(), conf.getFps());
		assertEquals(modelFactory.getSampleConfigurationModel().getLogoColor(), conf.getLogoColor());
		assertEquals(modelFactory.getSampleConfigurationModel().getModel() == 0 ? Model.CAR : Model.LOGO,
				conf.getModel());
		assertEquals(modelFactory.getSampleConfigurationModel().getThreshold(), conf.getThreshold());
		assertEquals(modelFactory.getSampleConfigurationModel().isThresholdChecked(), conf.isThresholdChecked());
	}

	@Test
	public void testGetConfigurationFromDbCache() {
		assertTrue(configurationService.getConfigurationFromDb() == configurationService.getConfigurationFromDb());
	}

}
